// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vtfr/bossanova/store (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/vtfr/bossanova/model"
	store "github.com/vtfr/bossanova/store"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AllBoards mocks base method
func (m *MockStore) AllBoards() ([]*model.Board, error) {
	ret := m.ctrl.Call(m, "AllBoards")
	ret0, _ := ret[0].([]*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBoards indicates an expected call of AllBoards
func (mr *MockStoreMockRecorder) AllBoards() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBoards", reflect.TypeOf((*MockStore)(nil).AllBoards))
}

// AllUsers mocks base method
func (m *MockStore) AllUsers() ([]*model.User, error) {
	ret := m.ctrl.Call(m, "AllUsers")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsers indicates an expected call of AllUsers
func (mr *MockStoreMockRecorder) AllUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsers", reflect.TypeOf((*MockStore)(nil).AllUsers))
}

// BumpThread mocks base method
func (m *MockStore) BumpThread(arg0 string) error {
	ret := m.ctrl.Call(m, "BumpThread", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BumpThread indicates an expected call of BumpThread
func (mr *MockStoreMockRecorder) BumpThread(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpThread", reflect.TypeOf((*MockStore)(nil).BumpThread), arg0)
}

// Clone mocks base method
func (m *MockStore) Clone() store.Store {
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(store.Store)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockStoreMockRecorder) Clone() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockStore)(nil).Clone))
}

// Close mocks base method
func (m *MockStore) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateBoard mocks base method
func (m *MockStore) CreateBoard(arg0 *model.Board) error {
	ret := m.ctrl.Call(m, "CreateBoard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockStoreMockRecorder) CreateBoard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockStore)(nil).CreateBoard), arg0)
}

// CreatePost mocks base method
func (m *MockStore) CreatePost(arg0 *model.Post) error {
	ret := m.ctrl.Call(m, "CreatePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockStoreMockRecorder) CreatePost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0)
}

// CreateUser mocks base method
func (m *MockStore) CreateUser(arg0 *model.User) error {
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStoreMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0)
}

// DeleteBoard mocks base method
func (m *MockStore) DeleteBoard(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteBoard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard
func (mr *MockStoreMockRecorder) DeleteBoard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockStore)(nil).DeleteBoard), arg0)
}

// DeletePost mocks base method
func (m *MockStore) DeletePost(arg0 string) error {
	ret := m.ctrl.Call(m, "DeletePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockStoreMockRecorder) DeletePost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0)
}

// DeleteUser mocks base method
func (m *MockStore) DeleteUser(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockStoreMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0)
}

// GetBoard mocks base method
func (m *MockStore) GetBoard(arg0 string) (*model.Board, error) {
	ret := m.ctrl.Call(m, "GetBoard", arg0)
	ret0, _ := ret[0].(*model.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard
func (mr *MockStoreMockRecorder) GetBoard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockStore)(nil).GetBoard), arg0)
}

// GetPost mocks base method
func (m *MockStore) GetPost(arg0 string) (*model.Post, error) {
	ret := m.ctrl.Call(m, "GetPost", arg0)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockStoreMockRecorder) GetPost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), arg0)
}

// GetReplies mocks base method
func (m *MockStore) GetReplies(arg0 string) ([]*model.Post, error) {
	ret := m.ctrl.Call(m, "GetReplies", arg0)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies
func (mr *MockStoreMockRecorder) GetReplies(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockStore)(nil).GetReplies), arg0)
}

// GetThread mocks base method
func (m *MockStore) GetThread(arg0 string) (*model.Thread, error) {
	ret := m.ctrl.Call(m, "GetThread", arg0)
	ret0, _ := ret[0].(*model.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThread indicates an expected call of GetThread
func (mr *MockStoreMockRecorder) GetThread(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThread", reflect.TypeOf((*MockStore)(nil).GetThread), arg0)
}

// GetUser mocks base method
func (m *MockStore) GetUser(arg0 string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockStoreMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0)
}

// IsBanned mocks base method
func (m *MockStore) IsBanned(arg0 string) (*model.Ban, bool, error) {
	ret := m.ctrl.Call(m, "IsBanned", arg0)
	ret0, _ := ret[0].(*model.Ban)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsBanned indicates an expected call of IsBanned
func (mr *MockStoreMockRecorder) IsBanned(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockStore)(nil).IsBanned), arg0)
}

// UpdateBoard mocks base method
func (m *MockStore) UpdateBoard(arg0 *model.Board) error {
	ret := m.ctrl.Call(m, "UpdateBoard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBoard indicates an expected call of UpdateBoard
func (mr *MockStoreMockRecorder) UpdateBoard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockStore)(nil).UpdateBoard), arg0)
}

// UpdatePost mocks base method
func (m *MockStore) UpdatePost(arg0 *model.Post) error {
	ret := m.ctrl.Call(m, "UpdatePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockStoreMockRecorder) UpdatePost(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0)
}

// UpdateUser mocks base method
func (m *MockStore) UpdateUser(arg0 *model.User) error {
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockStoreMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0)
}
