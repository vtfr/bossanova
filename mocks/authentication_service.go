// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vtfr/bossanova/service (interfaces: Authenticator)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/vtfr/bossanova/model"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthenticateToken mocks base method
func (m *MockAuthenticator) AuthenticateToken(arg0 string) (*model.User, error) {
	ret := m.ctrl.Call(m, "AuthenticateToken", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateToken indicates an expected call of AuthenticateToken
func (mr *MockAuthenticatorMockRecorder) AuthenticateToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateToken", reflect.TypeOf((*MockAuthenticator)(nil).AuthenticateToken), arg0)
}

// CreateToken mocks base method
func (m *MockAuthenticator) CreateToken(arg0 *model.User) (string, error) {
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockAuthenticatorMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthenticator)(nil).CreateToken), arg0)
}
